// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/wallet/contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	wallet "github.com/jennwah/crypto-assignment/internal/domain/wallet"
)

// MockIWalletRepository is a mock of IWalletRepository interface.
type MockIWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIWalletRepositoryMockRecorder
}

// MockIWalletRepositoryMockRecorder is the mock recorder for MockIWalletRepository.
type MockIWalletRepositoryMockRecorder struct {
	mock *MockIWalletRepository
}

// NewMockIWalletRepository creates a new mock instance.
func NewMockIWalletRepository(ctrl *gomock.Controller) *MockIWalletRepository {
	mock := &MockIWalletRepository{ctrl: ctrl}
	mock.recorder = &MockIWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWalletRepository) EXPECT() *MockIWalletRepositoryMockRecorder {
	return m.recorder
}

// DepositWallet mocks base method.
func (m *MockIWalletRepository) DepositWallet(ctx context.Context, userID, idempotencyKey string, amount uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositWallet", ctx, userID, idempotencyKey, amount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DepositWallet indicates an expected call of DepositWallet.
func (mr *MockIWalletRepositoryMockRecorder) DepositWallet(ctx, userID, idempotencyKey, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositWallet", reflect.TypeOf((*MockIWalletRepository)(nil).DepositWallet), ctx, userID, idempotencyKey, amount)
}

// GetWallet mocks base method.
func (m *MockIWalletRepository) GetWallet(ctx context.Context, userID string) (wallet.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, userID)
	ret0, _ := ret[0].(wallet.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockIWalletRepositoryMockRecorder) GetWallet(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockIWalletRepository)(nil).GetWallet), ctx, userID)
}

// GetWalletTransactionsHistory mocks base method.
func (m *MockIWalletRepository) GetWalletTransactionsHistory(ctx context.Context, userID string, offset, pageSize int) ([]wallet.Transaction, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletTransactionsHistory", ctx, userID, offset, pageSize)
	ret0, _ := ret[0].([]wallet.Transaction)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWalletTransactionsHistory indicates an expected call of GetWalletTransactionsHistory.
func (mr *MockIWalletRepositoryMockRecorder) GetWalletTransactionsHistory(ctx, userID, offset, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletTransactionsHistory", reflect.TypeOf((*MockIWalletRepository)(nil).GetWalletTransactionsHistory), ctx, userID, offset, pageSize)
}

// Transfer mocks base method.
func (m *MockIWalletRepository) Transfer(ctx context.Context, initiatorUserID, recipientUserID, idempotencyKey string, amount uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, initiatorUserID, recipientUserID, idempotencyKey, amount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockIWalletRepositoryMockRecorder) Transfer(ctx, initiatorUserID, recipientUserID, idempotencyKey, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockIWalletRepository)(nil).Transfer), ctx, initiatorUserID, recipientUserID, idempotencyKey, amount)
}

// WithdrawWallet mocks base method.
func (m *MockIWalletRepository) WithdrawWallet(ctx context.Context, userID, idempotencyKey string, amount uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawWallet", ctx, userID, idempotencyKey, amount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawWallet indicates an expected call of WithdrawWallet.
func (mr *MockIWalletRepositoryMockRecorder) WithdrawWallet(ctx, userID, idempotencyKey, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawWallet", reflect.TypeOf((*MockIWalletRepository)(nil).WithdrawWallet), ctx, userID, idempotencyKey, amount)
}
